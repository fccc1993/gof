装饰者模式: 动态的将责任附加到对象上. 若要扩展功能, 装饰者提供了比继承更有弹性的替代方案.
装饰者模式:
	1.装饰者和组件对象有相同的超类型.利用继承达到 "类型匹配", 而不是利用继承获得 "行为".行为来自装饰者和基础组件, 或者与其他装饰者之间的组合关系.
	2.用一个或多个装饰者包装组件.
	3.在任何需要原始对象(组件)的场合, 可以用装饰对象代替.
	4.装饰者可以在所委托组件的行为之前与/或之后,加上装饰行为, 已达到特定目的.
	5.组件可以在任何时候被装饰, 可以在运行时动态, 不限量的用装饰者来装饰组件.
	6.每个组件可以单独使用, 或者被装饰者装饰起来使用.
类设计原则:
	类应该对扩展开放, 对修改关闭.
	
	
java.io 装饰者模式
InputStream: 抽象组件
FileInputStream/StringBufferInputStream/ByteArrayInputStream: 具体组件
FilterInputStream: 装饰者抽象类
BufferedInputStream/DataInputStream: 具体装饰者